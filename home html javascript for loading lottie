<!-- Lottie Scroll Effect with Text Overlays (using lottie-web and existing GSAP ScrollTrigger) -->
<!-- This code creates a scroll-driven Lottie animation with text overlays, -->
<!-- ensuring it pins to the screen and plays precisely with scroll. -->

<style>
/* Ensure html and body have enough height and no hidden overflow */
html, body {
  min-height: 100vh; /* Ensure at least full viewport height */
  overflow-x: hidden; /* Prevent horizontal scroll */
  margin: 0;
  padding: 0;
}

/* Container for the scroll effect. Its height determines the scroll duration. */
.lottie-scroll-container {
  position: relative;
  height: 600vh; /* ADJUSTED: Increased height to allow animation to play longer during scroll */
  width: 100%;
  margin: 0;
  padding: 0;
  /* background-color: rgba(255, 0, 0, 0.05); /* Optional: for debugging to see the container's extent */
}

/* The wrapper that will be pinned by ScrollTrigger */
.lottie-sticky-wrapper {
  position: relative; /* Changed from sticky, ScrollTrigger will handle pinning */
  top: 0;
  width: 100%;
  height: 100vh; /* Occupy full viewport height when pinned */
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden; /* Hide any overflow from the Lottie animation */
  z-index: 10; /* Ensure it's above other page content */
}

/* Lottie animation container (will hold the lottie-web animation) */
#lottie-animation-container {
  width: 100%;
  max-width: 100%; /* Fills available width */
  height: 85%; /* Fills available height */
  object-fit: contain; /* Scales to fit within the container, maintaining aspect ratio */
  display: block; /* Remove extra space below inline elements */
  pointer-events: none; /* Allow clicks to pass through to elements behind if needed */
}

/* Styling for the text overlays */
.text-overlay {
  position: absolute;
  /* REMOVED: top, left, transform from here. These will be set by JavaScript once on load. */
  opacity: 0;
  transition: opacity 0.5s ease-in-out;
  text-align: center;
  max-width: 90%;
  pointer-events: none; /* Initially no pointer events */
  z-index: 11; /* Ensure text is above the Lottie animation */
  padding: 15px; /* Add some padding */
  box-sizing: border-box; /* Include padding in width/height */
}

.text-overlay.active {
  opacity: 1;
  pointer-events: auto; /* Enable pointer events when active */
}

.text-overlay h2 {
  margin: 0;
  font-family: 'Poppins', sans-serif; /* Font to Poppins */
  color: #260C1A; /* Text color */
  text-shadow: none; /* Removed text shadow */
}

/* Responsive adjustments for smaller screens */
@media (max-width: 768px) {
  .lottie-scroll-container {
    height: 300vh; /* Adjust scroll duration for mobile */
  }
  #lottie-animation-container {
    max-width: 95%; /* Make Lottie wider on small screens */
  }
  .text-overlay h2 {
    font-size: 1.8em; /* Adjust font size for mobile */
  }
}
</style>

<!-- The main container that provides the scrollable height -->
<div class="lottie-scroll-container">
  <!-- The sticky wrapper that holds the Lottie animation and text overlays -->
  <div class="lottie-sticky-wrapper">
    <!-- This div will be the target for the lottie-web animation -->
    <div id="lottie-animation-container" class="lottie-animation"></div>

    <!-- Text Overlays -->
    <div class="text-overlay" id="text-1">
      <h2>Capturing all the different <span class="highlightpink">Screens</span></h2>
    </div>

    <div class="text-overlay" id="text-2">
      <h2>Capturing all the different <span class="highlightpink">Paths</span></h2>
    </div>

    <div class="text-overlay" id="text-3">
      <h2>Capturing all the different <span class="highlightpink">States</span></h2>
    </div>

    <div class="text-overlay" id="text-4">
      <h2>Down to the individual <span class="highlightpink">element level</span></h2>
    </div>

    <div class="text-overlay" id="text-5">
      <h2>Captured and added to the <span class="highlightpink">TestChimp Context Window</span></h2>
    </div>
  </div>
</div>

<script>
// This part of the script will execute as soon as the HTML is parsed.
console.log('Custom Lottie script parsed!');

// Function to dynamically load the lottie-web library
const loadLottieWebScript = () => {
  return new Promise((resolve, reject) => {
    if (window.lottie) {
      console.log('lottie-web already defined. Skipping dynamic load.');
      resolve();
      return;
    }

    const script = document.createElement('script');
    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.12.2/lottie.min.js'; // Using lottie-web CDN
    script.async = true;
    script.defer = true;

    script.onload = () => {
      console.log('Dynamically loaded lottie.min.js successfully!');
      resolve();
    };

    script.onerror = (e) => {
      console.error('Failed to dynamically load lottie.min.js', e);
      reject(e);
    };

    document.head.appendChild(script);
    console.log('Attempting to dynamically load lottie.min.js...');
  });
};

// Use DOMContentLoaded to ensure the HTML structure is ready before trying to find elements
document.addEventListener('DOMContentLoaded', async () => {
  console.log('DOM Content Loaded, starting Lottie setup sequence.');

  try {
    // Register ScrollTrigger plugin with GSAP as it's already loaded globally
    if (window.gsap && typeof window.gsap.registerPlugin === 'function' && !window.ScrollTrigger.isRegistered) {
      gsap.registerPlugin(ScrollTrigger);
      console.log('ScrollTrigger plugin registered with GSAP (globally loaded).');
    } else if (window.gsap && window.ScrollTrigger && window.ScrollTrigger.isRegistered) {
      console.log('GSAP and ScrollTrigger already registered.');
    } else {
      console.error('GSAP or ScrollTrigger not found or not correctly registered. Ensure they are loaded in header.php.');
      return; // Stop execution if core libs are missing
    }

    // Then load Lottie-web
    await loadLottieWebScript();

    // Now that all libraries are loaded, wait for the entire window to fully load.
    window.onload = function() {
      console.log('Window fully loaded, proceeding with Lottie setup.');

      // Add a small delay to ensure DOM is completely settled
      setTimeout(() => {
        const lottieAnimationContainer = document.getElementById('lottie-animation-container');
        const container = document.querySelector('.lottie-scroll-container');
        const stickyWrapper = document.querySelector('.lottie-sticky-wrapper');

        if (!lottieAnimationContainer) {
          console.error('Lottie animation container element with ID "lottie-animation-container" not found. Check HTML structure.');
          return;
        }

        // Define Lottie URLs for desktop and mobile
        // IMPORTANT: Use your own hosted Lottie files to avoid CORS issues with external CDNs.
        const desktopLottieUrl = 'https://testchimp.io/wp-content/uploads/2025/07/Artboard-13.json'; // Your primary Lottie URL
        const mobileLottieUrl = 'https://testchimp.io/wp-content/uploads/2025/07/Artboard-13.json'; // Your mobile Lottie URL

        let currentAnim = null; // To store the current Lottie animation instance

        // Function to load/reload Lottie based on screen size
        const loadResponsiveLottie = () => {
          console.log('loadResponsiveLottie called.');
          const isMobile = window.matchMedia('(max-width: 768px)').matches; // Define your mobile breakpoint
          const lottieToLoad = isMobile ? mobileLottieUrl : desktopLottieUrl;

          console.log(`Current screen is ${isMobile ? 'mobile' : 'desktop'}. Selected Lottie URL: ${lottieToLoad}`);

          // Only reload if the Lottie URL has changed or it's the initial load
          if (!currentAnim || currentAnim.path !== lottieToLoad) {
            console.log('Lottie URL changed or initial load. Proceeding to load new Lottie.');

            // Destroy existing animation if it exists
            if (currentAnim) {
              currentAnim.destroy();
              console.log('Destroyed previous Lottie animation.');
            }

            currentAnim = lottie.loadAnimation({
              container: lottieAnimationContainer,
              renderer: 'svg',
              loop: false,
              autoplay: false,
              path: lottieToLoad
            });

            currentAnim.addEventListener('DOMLoaded', function() {
              console.log('Lottie animation DOMLoaded (lottie-web ready equivalent)!');
              console.log('Total frames:', currentAnim.totalFrames);
              currentAnim.stop();
              console.log('Lottie animation explicitly stopped.');

              if (typeof currentAnim.totalFrames !== 'number' || currentAnim.totalFrames <= 0) {
                console.error('Lottie animation has invalid or zero totalFrames. Cannot control playback with lottie-web.');
                return;
              }

              // Re-initialize ScrollTrigger for the new animation
              // Destroy any old ScrollTrigger instance first if it exists
              if (window.gsap && window.ScrollTrigger) {
                ScrollTrigger.getAll().forEach(trigger => trigger.kill()); // Kill all existing ScrollTriggers
                console.log('Killed all previous ScrollTrigger instances.');
              }


              const tl = gsap.timeline({
                scrollTrigger: {
                  trigger: container,
                  start: "top 50px", // Start pinning when the container's top hits 50px from viewport top
                  end: "bottom bottom",
                  scrub: true,
                  pin: stickyWrapper,
                  markers: false,
                  // pinSpacing: false, // Removed this property
                  onUpdate: self => {
                    const scrollProgress = self.progress;
                    const targetFrame = Math.floor(scrollProgress * (currentAnim.totalFrames - 1));
                    currentAnim.goToAndStop(targetFrame, true);

                    overlayElements.forEach(overlay => {
                      const element = overlay.element;
                      if (element) {
                        if (scrollProgress >= overlay.start && scrollProgress <= overlay.end) {
                          if (!element.classList.contains('active')) {
                            element.classList.add('active');
                          }
                        } else {
                          if (element.classList.contains('active')) {
                            element.classList.remove('active');
                          }
                        }
                      }
                    });
                  }
                }
              });
              ScrollTrigger.refresh(); // Force a refresh after new setup
              console.log('ScrollTrigger re-initialized and refreshed.');
            });

            currentAnim.addEventListener('data_failed', function(e) {
              console.error('Lottie-web data loading failed:', e);
              console.log('Ensure your Lottie JSON file is accessible and valid.');
            });
          } else {
            console.log('Lottie URL is the same, no need to reload.');
          }
        };

        // Text overlay configurations - UPDATED with positioning
        const textOverlays = [
          {
            id: 'text-1',
            start: 0.1,
            end: 0.3,
            style: {
              top: '17%',
              left: '50%',
              transform: 'translate(-50%, -50%)' // Default: Centered
            }
          },
          {
            id: 'text-2',
            start: 0.3,
            end: 0.45,
            style: {
              top: '17%', // Example: Move text-2 higher
              left: '50%', // Example: Move text-2 to the right
              transform: 'translate(-50%, -50%)' // Keep for centering relative to new top/left
            }
          },
          {
            id: 'text-3',
            start: 0.45,
            end: 0.70,
            style: {
              top: '17%',
              left: '50%',
              transform: 'translate(-50%, -50%)' // Default: Centered
            }
          },
          {
            id: 'text-4',
            start: 0.70,
            end: .80,
            style: {
              top: '17%', // Example: Move text-4 lower
              left: '50%',
              transform: 'translate(-50%, -50%)' // Keep for centering relative to new top/left
            }
          },
          {
            id: 'text-5',
            start: 0.80,
            end: 1.00,
            style: {
              top: '17%', // Example: Move text-4 lower
              left: '50%',
              transform: 'translate(-50%, -50%)' // Keep for centering relative to new top/left
            }
          }
        ];

        // Store references to text overlay elements and apply initial positioning
        const overlayElements = textOverlays.map(config => {
          const element = document.getElementById(config.id);
          if (element && config.style) {
            element.style.top = config.style.top || '';
            element.style.left = config.style.left || '';
            element.style.transform = config.style.transform || '';
          }
          return { ...config, element: element };
        });

        // Initial load of Lottie
        loadResponsiveLottie();

        // Listen for screen size changes to swap Lottie
        // Use a named function for the listener to allow removal if needed
        const mediaQueryListener = () => loadResponsiveLottie();
        window.matchMedia('(max-width: 768px)').addEventListener('change', mediaQueryListener);

      }, 200); // 200ms delay to allow DOM to settle after window.onload
    }; // End of window.onload
  } catch (error) {
    console.error('Error during Lottie setup sequence:', error);
  }
});
</script>
